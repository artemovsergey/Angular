# Introducing ASP.NET and Angular

В первых двух главах этой книги мы построим основы нашего путешествия по ASP.NET и Angular.
смешивая теоретическое освещение их наиболее важных особенностей с практическим подходом. Более конкретно,
в первой главе мы кратко рассмотрим недавнюю историю фреймворков ASP.NET/.NET Core и Angular, а во второй главе мы узнаем, как настроить нашу локальную среду разработки.
чтобы мы могли собрать, построить и протестировать образец шаблона веб-приложения.
К концу этих глав вы получите представление о пути, пройденном ASP.NET и Angular.
улучшить веб-разработку за последние несколько лет и научился правильно настраивать ASP.NET и
Веб-приложение Angular.

Вот основные темы, которые мы собираемся осветить в этой главе:
• Два игрока, одна цель. Как ASP.NET и Angular можно использовать вместе для создания современной,
многофункциональное и универсальное веб-приложение
• Революция ASP.NET Core. Краткая история последних достижений ASP.NET
• Что нового в Angular. Краткое изложение пути разработки Angular, от его истоков до
самые последние дни

Технические требования
Это пакеты программного обеспечения (и соответствующие номера версий), использованные при написании этой книги и тестировании
исходный код:
• Visual Studio 2022 Community Edition 17.0.0 с дополнительным ASP.NET и веб-разработкой.
рабочая нагрузка (ее можно выбрать в разделе «Рабочие нагрузки» в приложении установщика Visual Studio)
• Microsoft .NET 6 SDK 6.0.100.
• TypeScript 4.3.
• Менеджер пакетов NuGet 6.0.
• Node.js 14.15.0 (мы настоятельно рекомендуем установить его с помощью Node Version Manager, также известного как
как НВМ)
• Угловая 13.0.1

Мы настоятельно рекомендуем использовать ту же версию, что и в этой книге, или более новую, но на свой страх и риск!
Шутки в сторону: если вы предпочитаете использовать другую версию, это совершенно нормально, если вы знаете, что
в этом случае вам может потребоваться вручную внести некоторые изменения и корректировки в исходный код.
Файлы кода для этой книги можно найти здесь: https://github.com/PacktPublishing/ASP.NETCore-6-and-Angular.


Два игрока, одна цель
С точки зрения полнофункционального веб-приложения мы можем сказать, что интерфейс веб-API, предоставляемый платформой ASP.NET, представляет собой программный набор серверных обработчиков, используемых
сервер для предоставления ряда перехватчиков и/или конечных точек определенной системе сообщений запрос-ответ.
Обычно это выражается в структурированных языках разметки (XML), независимых от языка форматах данных.
(JSON) или языки запросов для API (GraphQL). Как мы уже говорили, это достигается за счет раскрытия
интерфейсы прикладного программирования (API) через протоколы HTTP и/или HTTPS через общедоступную
доступный веб-сервер, такой как IIS, Node.js, Apache или NGINX.
Аналогично, Angular можно охарактеризовать как современную, многофункциональную клиентскую среду, которая продвигает
Самые продвинутые функции HTML и ECMAScript, а также возможности современного браузера, позволяющие
в полной мере, связывая входные и/или выходные части веб-страницы HTML в гибкую, многоразовую и легко тестируемую модель.
Можем ли мы объединить сильные стороны ASP.NET и возможности Angular для внешнего интерфейса, чтобы
создать современное, многофункциональное и универсальное веб-приложение?
Короче говоря, ответ: да. В следующих главах мы увидим, как это можно сделать, проанализировав все
фундаментальные аспекты хорошо написанного, правильно спроектированного веб-продукта, а также то, как новейшие
версии ASP.NET и/или Angular могут использоваться для обработки каждого из них. Однако, прежде чем делать
и все это, возможно, было бы очень полезно немного вернуться назад и потратить некоторое драгоценное время, вспоминая, что
произошло за последние 8 лет в истории разработки двух фреймворков, которые мы собираемся использовать. Это
будет очень полезно понять основные причины, по которым мы все еще отдаем им должное, несмотря на
ценные усилия своих постоянно растущих конкурентов.


Революция ASP.NET Core
Подвести итог тому, что произошло в мире ASP.NET за последнее десятилетие, — непростая задача;
Короче говоря, мы можем сказать, что мы, несомненно, стали свидетелями самой важной серии изменений в .NET.
Framework с того года, как он воплотился в жизнь. Это была революция, изменившая весь подход Microsoft к разработке программного обеспечения практически во всех отношениях. Чтобы правильно понять, что произошло в тех
лет было бы полезно выявить некоторые отличительные ключевые моменты в медленном, но постоянном путешествии.
это позволило компании, известной (и несколько ненавидимой) своим проприетарным программным обеспечением, лицензиями и
патенты станут движущей силой развития открытого исходного кода во всем мире.
Первый актуальный шаг, по крайней мере, по моему скромному мнению, был сделан 3 апреля 2014 года на ежегодной конференции Microsoft Build, которая проходила в Moscone Center (West) в Сан-Франциско. Это было там,
во время памятной программной речи Андерс Хейлсберг – отец Delphi и ведущий архитектор
C# — публично выпущена первая версия платформы компилятора .NET, известная как Roslyn, как открытая версия.
исходный проект.

Именно там Скотт Гатри, исполнительный вице-президент группы Microsoft Cloud и AI,
объявила об официальном запуске .NET Foundation, некоммерческой организации, целью которой является улучшение
разработка программного обеспечения с открытым исходным кодом и совместная работа в экосистеме .NET.
С того решающего дня команда разработчиков .NET постоянно публиковала потоки Microsoft с открытым исходным кодом.
проекты на платформе GitHub, включая Entity Framework Core (май 2014 г.), TypeScript (октябрь
2014 г.), .NET Core (октябрь 2014 г.), CoreFX (ноябрь 2014 г.), CoreCLR и RyuJIT (январь 2015 г.), MSBuild
(март 2015 г.), .NET Core CLI (октябрь 2015 г.), Visual Studio Code (ноябрь 2015 г.), .NET Standard
(сентябрь 2016 г.) и так далее.

ASP.NET Core 1.x
Самым важным достижением, принесенным этими усилиями по развитию открытого исходного кода, было
публичный выпуск ASP.NET Core 1.0, вышедший в третьем квартале 2016 года. Это была полная переработка
платформы ASP.NET, известной нам с января 2002 года и которая развилась без существенных изменений в своей базовой архитектуре до версии 4.6.2 (август 2016 года). Совершенно новая структура
объединили все предыдущие технологии веб-приложений, такие как MVC, веб-API и веб-страницы, в
единый программный модуль, ранее известный как MVC6. Новая структура ввела полностью
функциональный кроссплатформенный компонент, также известный как .NET Core, поставляемый со всем набором открытых
упомянутые ранее исходные инструменты, а именно платформа компилятора (Roslyn), кроссплатформенная среда выполнения
(CoreCLR) и улучшенный компилятор x64 Just-In-Time (RyuJIT).

Некоторые из вас, возможно, помнят, что ASP.NET Core изначально назывался ASP.NET 5.
Фактически, ASP.NET 5 было не чем иным, как исходным названием ASP.NET Core до середины 2016 года, когда команда разработчиков Microsoft решила переименовать его, чтобы подчеркнуть тот факт, что
это было полное переписывание. Причины этого, а также видение Microsoft относительно
новый продукт, более подробно объяснены в следующей записи блога Скотта Хансельмана, в которой
ожидал изменения 16 января 2016 г.: http://www.hanselman.com/blog/ASPNE
T5IsDead Представляем ASPNETCore10AndNETCore10.aspx.
Для тех, кто не знает: Скотт Хансельман был менеджером по связям с общественностью и сообществом .NET/ASP.NET/IIS/Azure и Visual Studio с 2007 года. Дополнительная информация
информацию о переключении перспективы также можно найти в следующей статье Джеффри Т.
Фриц, менеджер программ Microsoft и руководитель группы NuGet: https://blogs.msdn.
microsoft.com/webdev/2016/02/01/an-update-on-asp-net-core-and-net-core/.
Что касается Web API 2, это была специальная платформа для создания HTTP-сервисов, возвращающих
чистые данные JSON или XML вместо веб-страниц. Изначально родился как альтернатива MVC.
платформа, она была объединена с последней в новое веб-приложение общего назначения.
Framework, известный как MVC6, который теперь поставляется как отдельный модуль ASP.NET Core.

За финальной версией 1.0 вскоре последовал ASP.NET Core 1.1 (четвертый квартал 2016 г.), который принес некоторые новые возможности.
функции и улучшения производительности, а также устранено множество ошибок и проблем совместимости.
затрагивает более раннюю версию.

Эти новые функции включают возможность настройки промежуточного программного обеспечения в качестве фильтров (добавив их в файл MVC).
конвейер, а не конвейер HTTP-запросов); встроенный, независимый от хоста модуль перезаписи URL-адресов,
доступен через специальный пакет Microsoft.AspNetCore.Rewrite NuGet; рассматривать компоненты как помощники тегов; просматривать компиляцию во время выполнения, а не по требованию; Собственное сжатие .NET
и кэширование модулей промежуточного программного обеспечения; и так далее.

ASP.NET Core 2.x
Еще один важный шаг был сделан с ASP.NET Core 2.0, который вышел во втором квартале 2017 года в качестве предварительной версии и
затем в третьем квартале 2017 года для окончательного выпуска. В новой версии появилось множество важных интерфейсов.
улучшения, в основном направленные на стандартизацию общих API в .NET Framework, .NET Core,
и .NET Standard, чтобы обеспечить их обратную совместимость с .NET Framework. Благодаря этим усилиям,
перенос существующих проектов .NET Framework на .NET Core и/или .NET Standard стал намного проще, чем
раньше, давая многим традиционным разработчикам возможность попытаться адаптироваться к новой парадигме без
теряют существующие ноу-хау.
Опять же, вскоре за основной версией последовала улучшенная и усовершенствованная: ASP.NET Core 2.1. Этот
был официально выпущен 30 мая 2018 г. и представил ряд дополнительных мер безопасности и производительности.
улучшения, а также ряд новых функций, включая SignalR, библиотеку с открытым исходным кодом, которая
упрощает добавление веб-функций реального времени в приложения .NET Core; библиотеки классов Razor; значительный
улучшение Razor SDK, которое позволяет разработчикам создавать представления и страницы в многоразовом классе.
библиотеки и/или библиотечные проекты, которые можно поставлять в виде пакетов NuGet; библиотека пользовательского интерфейса Identity и
строительные леса, позволяющие придать индивидуальность любому приложению и настроить его в соответствии с вашими потребностями; Поддержка HTTPS включена
по умолчанию; встроенная поддержка Общего регламента защиты данных (GDPR) с использованием API-интерфейсов, ориентированных на конфиденциальность, и
шаблоны, которые дают пользователям контроль над своими личными данными и согласие на использование файлов cookie; обновленные шаблоны SPA
для клиентских фреймворков Angular и ReactJS; и многое другое.

Подождите: мы только что сказали Angular? Да, это верно. Фактически, с момента его первого выпуска,
ASP.NET Core был специально разработан для полной интеграции с популярными клиентскими платформами, такими как ReactJS и Angular. Именно по этой причине и существуют подобные книги. 
Основное отличие, представленное в ASP.NET Core 2.1, заключается в том, что шаблоны Angular и ReactJS по умолчанию
были обновлены для использования стандартных структур проектов и систем сборки для каждой платформы (
Angular CLI и команда create-react-app от NPX) вместо того, чтобы полагаться на средства запуска задач, такие как Grunt.
или Gulp, конструкторы модулей, такие как Webpack, или наборы инструментов, такие как Babel, которые широко использовались в
прошлого, хотя их было довольно сложно установить и настроить.

Возможность устранить необходимость в этих инструментах была крупным достижением, которое сыграло свою роль.
решающую роль в обновлении использования .NET Core и темпах роста среди разработчиков.
сообществах с 2017 года. Если вы посмотрите на две предыдущие части этой книги –
ASP.NET Core и Angular 2, опубликованные в середине 2016 года, а также вышедшие ASP.NET Core 2 и Angular 5.
в конце 2017 года – и сравните их первую главу с этой, вы увидите огромную разницу
между необходимостью вручную использовать Gulp, Grunt или веб-пакет и полагаться на интегрированный
собственные инструменты фреймворка. Это существенное снижение сложности, которое значительно
принесет пользу любому разработчику, особенно тем, кто менее привык работать с этими инструментами.

Через шесть месяцев после выпуска версии 2.1 .NET Foundation представила дальнейшее улучшение: 4 декабря 2018 г. был выпущен ASP.NET Core 2.2 с несколькими исправлениями и новыми функциями.
включая улучшенную систему маршрутизации конечных точек для лучшей диспетчеризации запросов, обновленные шаблоны
с поддержкой Bootstrap 4 и Angular 6, а также новой службой проверки работоспособности для мониторинга состояния.
сред развертывания и их базовой инфраструктуры, включая оркестровку контейнеров
системы, такие как Kubernetes, встроенная поддержка HTTP/2 в Kestrel и новый Java-клиент SignalR для упрощения
использование SignalR в приложениях Android.

ASP.NET Core 3.x
ASP.NET Core 3 был выпущен в сентябре 2019 года и обладал еще большей производительностью и
улучшения безопасности и новые функции, такие как поддержка настольных приложений Windows (Windows
только) с расширенными возможностями импорта для приложений Windows Forms и Windows Presentation Foundation (WPF); поддержка С#8; Внутренний доступ, зависящий от платформы .NET, посредством нового набора
встроенные API, которые могут значительно повысить производительность в определенных сценариях; отдельный файл
поддержка исполняемого файла с помощью команды публикации dotnet с использованием XML-элемента <PublishSingleFile>.
в конфигурации проекта или через параметр командной строки /p:PublishSingleFile; новая встроенная поддержка JSON, обеспечивающая высокую производительность и низкий уровень выделения ресурсов, который, возможно, в два-три раза выше.
быстрее, чем сторонняя библиотека JSON.NET (которая стала стандартом де-факто в большинстве веб-сайтов ASP.NET).
проекты); Поддержка TLS 1.3 и OpenSSL 1.1.1 в Linux; некоторые важные улучшения безопасности в
Пространство имен System.Security.Cryptography, включая поддержку шифров AES-GCM и AES-CCM; и
скоро.
Также была проделана большая работа по улучшению производительности и надежности фреймворка при
используется в контейнерной среде. Команда разработчиков ASP.NET Core приложила много усилий для
улучшение работы .NET Core Docker в .NET Core 3.0. Точнее, это первый выпуск.
включает существенные изменения во время выполнения, чтобы сделать CoreCLR более эффективным, соблюдая ограничения ресурсов Docker.
лучше (например, память и процессор) по умолчанию и предлагают больше настроек конфигурации. Среди различных
улучшения, мы могли бы упомянуть улучшенное использование памяти и кучи GC по умолчанию, а также PowerShell
Core, кроссплатформенная версия знаменитого инструмента автоматизации и настройки, которая теперь поставляется
с образами контейнеров Docker .NET Core SDK.

.NET Core 3 также представил Blazor, бесплатную веб-платформу с открытым исходным кодом, которая позволяет разработчикам
для создания веб-приложений с использованием C# и HTML.
И последнее, но не менее важное: стоит отметить, что новый .NET Core SDK намного меньше предыдущего.
в рассрочку, в основном благодаря тому, что команда разработчиков удалила огромный набор ненужных артефактов, входящих в различные пакеты NuGet, которые использовались для сборки предыдущих SDK.
(включая ASP.NET Core 2.2) из финальной сборки. Улучшения размера огромны для Linux и
версии macOS, хотя и менее заметны в Windows, поскольку этот SDK также содержит новые WPF и
Набор библиотек Windows Forms для конкретной платформы.

ASP.NET Core 3.1, самая последняя стабильная версия на момент написания, была выпущена
3 декабря 2019 г.

Изменения в последней версии в основном сосредоточены на разработке настольных компьютеров Windows с окончательным удалением ряда устаревших элементов управления Windows Forms (DataGrid, ToolBar, ContextMenu, Menu,
MainMenu и MenuItem), а также добавлена поддержка создания компонентов C++/CLI (только в Windows).
Большинство обновлений ASP.NET Core представляли собой исправления, связанные с Blazor, например предотвращение действий по умолчанию для
события и прекращение распространения событий в приложениях Blazor, частичная поддержка классов для компонентов Razor,
и дополнительные функции вспомогательного компонента тегов; однако, как и другие выпуски .1, основной
целью .NET Core 3.1 было усовершенствование и улучшение функций, уже реализованных в предыдущей версии,
исправлено более 150 проблем с производительностью и стабильностью.

.NET 5
Как раз в тот момент, когда все подумали, что Microsoft наконец-то выбрала четкий путь в отношении соглашения об именах.
Что касается будущих фреймворков, сообщество разработчиков Microsoft снова было потрясено 6 мая 2019 года.
следующим сообщением Ричарда Ландера, менеджера программы команды .NET, которое появилось на
Блог разработчиков Microsoft: https://devblogs.microsoft.com/dotnet/introducing-net-5/.
Пост сразу же получил дубликат из другой статьи Скотта, вышедшей в тот же день.
Хантер, директор по управлению программами экосистемы .NET: https://devblogs.microsoft.com/
dotnet/net-core-это будущее сети/.
Эти две публикации были предназначены для того, чтобы поделиться с читателями одними и теми же важными новостями: .NET Framework 4.x и .NET.
Core 3.x будет объединен в следующей крупной версии .NET Core, в которой основная версия будет пропущена.
номер, чтобы правильно инкапсулировать обе части.
Новая унифицированная платформа будет называться .NET 5 и будет включать в себя все, что было выпущено.
до сих пор с единообразными возможностями и поведением: .NET Runtime, JIT, AOT, GC, BCL (библиотека базовых классов),
C#, VB.NET, F#, ASP.NET, Entity Framework, ML.NET, WinForms, WPF и Xamarin.

Microsoft заявила, что хочет в конечном итоге исключить термин «ядро» из названия фреймворка.
потому что .NET 5 будет основной реализацией .NET в будущем, заменив таким образом
.NET Framework и .NET Core; однако на данный момент экосистема ASP.NET Core
по-прежнему сохраняет название «Core», чтобы не путать его с ASP.NET MVC 5; Entity Framework Core также сохранит имя «Core», чтобы не путать его с Entity Framework.
5 и 6. По всем этим причинам в этой книге мы будем продолжать использовать «ASP.NET Core» (или .NET Core).
Core) и «Entity Framework Core» (или «EF Core»).


С точки зрения Microsoft, причины этого смелого выбора были довольно очевидны:
• Создать единую среду выполнения и платформу .NET, которую можно использовать повсюду и которая имеет
единообразное поведение во время выполнения и опыт разработчиков
• Расширьте возможности .NET, взяв лучшее от .NET Core, .NET Framework, Xamarin,
и моно
• Создайте этот продукт на основе единой базы кода, внутренней (Microsoft) и внешней (сообщества).
разработчики могут работать и расширяться вместе, и это улучшает все сценарии

Новое название может вполне разумно вызвать некоторую путаницу среди тех разработчиков, которые все еще помнят короткий период времени (начало-середина 2016 года), в котором ASP.
NET Core v1 до его окончательного выпуска все еще назывался ASP.NET 5. К счастью,
это «рабочее название» было отвергнуто командой разработчиков Microsoft и .NET.
сообщество, прежде чем оно смогло оставить заметные следы в сети.

.NET 5 была выпущена в общедоступную версию в ноябре 2020 года, через пару месяцев после ее первого выпуска.
Кандидат, тем самым соблюдая обновленный график .NET, целью которого является выпуск новой основной версии .NET.
один раз в год, каждый ноябрь:

Помимо нового названия, платформа .NET 5 принесла много интересных изменений, таких как:
• Улучшения производительности и инструменты измерения, обобщенные в этом замечательном анализе.
Стивен Тауб (инженер-программист-партнер .NET) с использованием новых инструментов Benchmark.NET:
https://devblogs.microsoft.com/dotnet/ Performance-improvements-in-net-5/.

• Half Type — двоичная плавающая запятая, занимающая всего 16 бит и помогающая сэкономить
объем памяти, где не требуется хранить вычисленный результат с полной
точность. Для получения дополнительной информации ознакомьтесь с публикацией Прашанта Говиндараджана (старшего технического менеджера LinkedIn): https://devblogs.microsoft.com/dotnet/introducingthe-half-type/.
• Обрезка сборок — опция на уровне компилятора для обрезки неиспользуемых сборок в рамках публикации.
автономные приложения при использовании опции автономного развертывания, как описано в
Сэм Спенсер (менеджер программы группы .NET Core) в этом посте: https://devblogs.microsoft.
com/dotnet/app-trimming-in-net-5/.
• Различные улучшения в новом API System.Text.Json, включая возможность игнорировать значения по умолчанию.
значения свойств типа значения при сериализации (для повышения производительности сериализации) и
чтобы лучше справляться с циклическими ссылками.
• Поддержка языков C# 9 и F# 5 с множеством новых функций, таких как Init Only Setters (которые позволяют
создание неизменяемых объектов), указатели на функции, статические анонимные функции, целевые типизированные
условные выражения, ковариантные типы возврата и инициализаторы модулей.

And a lot of other new features and improvements besides.

.NET 6
.NET 6 вышла 8 ноября 2021 года, через год после .NET 5, как и ожидалось по графику .NET. 
наиболее заметным улучшением в этой версии является введение пользовательского интерфейса многоплатформенного приложения,
также известный как MAUI: современный набор инструментов пользовательского интерфейса, созданный на основе Xamarin и специально созданный для того, чтобы в конечном итоге
заменить Xamarin и стать стандартом .NET для создания многоплатформенных приложений, которые могут работать
на Android, iOS, macOS и Windows из единой базы кода.
Основное различие между MAUI и Xamarin заключается в том, что новый подход теперь поставляется в качестве основной рабочей нагрузки, использует ту же библиотеку базовых классов, что и другие рабочие нагрузки (например, Blazor), и использует большинство
недавняя система проектов SDK Style, представленная в .NET 5, что обеспечивает единообразный инструментарий и кодирование.
опыт для всех разработчиков .NET.
Помимо MAUI, .NET 6 содержит множество новых функций и улучшений, таких как:
• Требуется поддержка языка C# 10 с некоторыми новыми функциями, такими как проверка нулевых параметров.
свойства, ключевое слово поля, пространства имен на уровне файла, операторы верхнего уровня, асинхронное основное, новое с целевым типом
выражения и многое другое.


Неявные директивы using — функция, которая инструктирует компилятор автоматически импортировать набор
использование операторов, основанных на типе проекта, без необходимости явного включения их в
каждый файл.
• Новые шаблоны проектов, которые намного понятнее и проще, поскольку в них реализована (и
продемонстрировать) большинство улучшений языка, внесенных в C# версий 9 и 10 (включая
те, о которых мы только что упомянули).
• Инструмент проверки пакетов — опция, которая позволяет разработчикам проверять, что их пакеты
последовательный и хорошо сформированный во время разработки пакета.
• Рабочие нагрузки SDK — функция, использующая концепции «рабочих нагрузок», представленные в .NET Core.
чтобы позволить разработчикам устанавливать только необходимые компоненты SDK, пропуская те части, которые им не нужны.
Необходимость: другими словами, это по сути «менеджер пакетов» для SDK.
• Улучшения производительности внутреннего цикла — семейство настроек, предназначенных для оптимизации производительности различных инструментов и рабочих процессов, используемых разработчиками (таких как CLI, среда выполнения и MSBuild), тем самым направленных на улучшение их опыта кодирования и сборки. Самое важное
из них — «Горячая перезагрузка», функция, позволяющая изменять исходный код проекта во время работы.
приложение работает без необходимости вручную приостанавливать или переходить к точке останова.


На этом мы завершаем наше путешествие по недавней истории ASP.NET. В следующем разделе мы переместим наши
сосредоточьтесь на экосистеме Angular, в которой произошел довольно похожий поворот событий.
Что нового в Angular?
Если следовать по стопам Microsoft и .NET Foundation в последние годы не было
простая задача, ситуация не улучшится, когда мы обратим внимание на клиентскую сеть
фреймворк, известный как Angular. Чтобы понять, что там произошло, нам придется вернуться на 10 лет назад, чтобы
когда библиотеки JavaScript, такие как jQuery и MooTools, доминировали на клиентской стороне; первый
клиентские фреймворки, такие как Dojo, Backbone.js и Knockout.js, изо всех сил пытались завоевать популярность.
и достичь широкого распространения; а таких вещей, как React и Vue.js, даже не существовало.

По правде говоря, jQuery по-прежнему в значительной степени доминирует на сцене, по крайней мере, согласно
ВстроенныйС (https://trends.builtwith.com/javascript/javascript-library) и
w3Techs (https://w3techs.com/technologies/overview/javascript_library/all).
Однако, несмотря на то, что его используют 74,1% всех веб-сайтов, этот вариант определенно выбирают реже.
чаще веб-разработчиками, чем это было 10 лет назад.


Получить Angular
История AngularJS началась в 2009 году, когда Мишко Хевери (ныне старший специалист по информатике и Agile
тренер в Google) и Адам Абронс (ныне технический директор Grand Rounds) работали над
их побочный проект, комплексный (E2E) инструмент веб-разработки, который предлагал бы онлайн-JSON.
служба хранения, а также клиентская библиотека для создания веб-приложений в зависимости от нее. Публиковать
для своего проекта они взяли имя хоста GetAngular.com.
В это время Хевери, который уже работал в Google, был назначен ответственным за Google Feedback.
проект с двумя другими разработчиками. Вместе они написали более 17 000 строк кода за 6 месяцев.
медленно погружаясь в разочаровывающий сценарий раздувания кода и проблем с тестированием. Учитывая ситуацию, Хевери
попросил своего менеджера переписать приложение с помощью GetAngular (побочный проект, упомянутый ранее), поспорив, что сможет сделать это самостоятельно в течение двух недель. Его менеджер согласился, и Хевери проиграл пари.
вскоре после этого все это заняло у него 3 недели вместо 2; однако новое приложение
имел всего 1500 строк кода вместо 17 000. Этого было более чем достаточно, чтобы заинтересовать Google
новый фреймворк, который вскоре после этого получил название AngularJS.

AngularJS
Первая стабильная версия AngularJS (версия 0.9.0, также известная как драконье дыхание) была выпущена
GitHub в октябре 2010 г. под лицензией MIT; Когда в июне 2012 года вышел AngularJS 1.0.0 (также известный как temporal domination), фреймворк уже приобрел огромную популярность в сети.
сообщества развития во всем мире.
Причины такого необычайного успеха вряд ли можно изложить в нескольких словах, но я попытаюсь объяснить.
Тем не менее сделайте это, подчеркнув некоторые ключевые моменты продажи:
• Внедрение зависимостей: AngularJS был первой клиентской средой, реализовавшей эту технологию. Это было
несомненно, огромное преимущество перед конкурентами, включая библиотеки, манипулирующие DOM, такие как
как jQuery. С помощью AngularJS разработчики могли писать слабосвязанные и легко тестируемые компоненты, оставляя фреймворку задачу их создания, разрешения их зависимостей и
и передачу их другим компонентам по запросу.
• Директивы: их можно описать как маркеры на определенных элементах DOM, таких как элементы, атрибуты и стили: мощная функция, которую можно использовать для указания пользовательских и многократно используемых элементов.
HTML-подобные элементы и атрибуты, определяющие привязку данных и/или другое специфическое поведение.
компонентов презентации.
• Двусторонняя привязка данных: автоматическая синхронизация данных между компонентами модели и представления. Когда данные в модели изменяются, это изменение отражается в представлении; когда данные в представлении
изменения, модель также обновляется. Это происходит немедленно и автоматически, что
гарантирует, что модель и представление постоянно обновляются.

Одностраничный подход: AngularJS был первым фреймворком, полностью устранившим необходимость в
страница перезагружается. Это дало большие преимущества как на стороне сервера (меньше и меньше сетевых ресурсов), так и на стороне сервера.
запросы) и на уровне клиента (более плавные переходы, более быстрое реагирование), а также налаженный
путь к шаблону одностраничного приложения, который также будет принят React, Vue.js,
и другие фреймворки, занявшие второе место, позже.
• Удобство для кэширования: вся магия AngularJS должна была происходить на стороне клиента без каких-либо
усилия на стороне сервера по созданию частей UI/UX. Именно по этой причине все сайты AngularJS
может быть кэширован где угодно и/или доступен через CDN.

Угловой 2
Новая версия AngularJS, выпущенная 14 сентября 2016 года и известная как Angular 2, стала полной версией AngularJS.
переписанный предыдущий, полностью основанный на новой версии ECMAScript 6 (официально ECMAScript
2015) характеристики. Как и переписывание ASP.NET Core, революция принесла такое количество
критические изменения на уровне архитектуры и обработки HTTP-конвейера, жизненного цикла приложения и
руководство заявило, что перенос старого кода на новый был практически невозможен. Несмотря на сохранение своего
прежнее название, новая версия Angular представляла собой совершенно новый фреймворк, практически не имеющий ничего общего.
с предыдущим.
Решение не делать Angular 2 обратно совместимым с AngularJS ясно продемонстрировало
намерение коллектива авторов применить совершенно новый подход не только в синтаксисе кода, но и
также в их образе мышления и разработке клиентского приложения. Новый Angular был очень модульным,
на основе компонентов и включает в себя новую улучшенную модель внедрения зависимостей и многое другое.
шаблонов программирования, о которых его старший брат никогда не слышал.
Вот краткий список наиболее важных улучшений, представленных в Angular 2:
• Семантическое управление версиями. Angular 2 — первая версия, в которой используется семантическое управление версиями, также известное как
SemVer: универсальный способ управления версиями различных выпусков программного обеспечения, помогающий разработчикам отслеживать
узнать, что происходит, без необходимости копаться в деталях журнала изменений. SemVer основан на трех
цифры – X.Y.Z, где X обозначает основную версию, Y обозначает второстепенную версию, а Z обозначает
для выпуска патча. Более конкретно, число X, обозначающее основную версию, увеличивается, когда в стабильные API вносятся несовместимые изменения API; число Y, представляющее
дополнительная версия увеличивается при добавлении функций обратной совместимости; и
число Z, обозначающее выпуск исправления, увеличивается при обратно совместимом
ошибка исправлена. Подобные улучшения можно легко недооценить, однако для большинства пользователей они необходимы.
современные сценарии разработки программного обеспечения, где непрерывная доставка (CD) имеет первостепенное значение и
новые версии выходят с большой частотой.

TypeScript: Опытные разработчики, вероятно, уже знают, что такое TypeScript. Те, кто
не нужно беспокоиться, так как мы будем часто использовать его в главах, посвященных Angular.
этой книги. А пока давайте просто скажем, что TypeScript — это надстройка JavaScript, созданная Microsoft.
который позволяет использовать все функции ES2015 (такие как параметры Default, Rest и Spread; литералы шаблонов; функции стрелок; Promises и т. д.) и добавляет мощные функции проверки типов и объектно-ориентированные функции во время разработки (например, объявления классов и типов). ). TypeScript
исходный код может быть преобразован в стандартный код JavaScript, понятный всем браузерам.
• Рендеринг на стороне сервера (SSR): Angular 2 поставляется с Angular Universal, технологией с открытым исходным кодом, которая позволяет внутреннему серверу запускать приложения Angular и обслуживать только конечный результат.
статические HTML-файлы клиенту. Короче говоря, сервер будет отображать первый проход страницы для
более быстрая доставка клиенту, а затем немедленное обновление клиентским кодом. У SSR есть свои предостережения, например, требование установки Node.js на хост-компьютере для выполнения необходимых действий.
шаги предварительного рендеринга, а также наличие всей папки node_modules, но это может значительно
увеличьте время отклика приложения для типичного интернет-браузера, тем самым уменьшив известную проблему с производительностью AngularJS.
• Angular Mobile Toolkit (AMT): набор инструментов, специально разработанных для создания высокопроизводительных мобильных приложений.
• Интерфейс командной строки (CLI). Новый интерфейс командной строки, представленный в Angular 2, может использоваться разработчиками для создания компонентов, маршрутов, сервисов и каналов с помощью команд консоли/терминала.
вместе с простыми тестовыми оболочками.
• Компоненты: это основные строительные блоки Angular 2, полностью заменяющие контроллеры и области действия AngularJS, а также берущие на себя большинство задач, ранее описанных в
прежние директивы. Данные приложения, бизнес-логика, шаблоны и стиль Angular.
2 приложения можно сделать с использованием компонентов.

Угловой 4
23 марта 2017 года Google выпустил Angular 4: версия номер 3 была полностью пропущена, чтобы
унифицировать все основные версии многих компонентов Angular, которые раньше разрабатывались отдельно
эта дата, например Angular Router, который на тот момент уже имел версию 3.x. Начиная с Angular 4,
затем вся структура Angular была объединена в один и тот же шаблон MAJOR.MINOR.PATCH SemVer.
Новая основная версия принесла ограниченное количество критических изменений, таких как новый и улучшенный
система маршрутизации, поддержка TypeScript 2.1+ (и обязательное требование), а также некоторые устаревшие интерфейсы и
теги. Также было внесено немало улучшений, в том числе:
• Предварительная компиляция (AOT): Angular 4 компилирует шаблоны на этапе сборки.
и соответственно генерирует код JavaScript. Это огромное архитектурное улучшение по сравнению с
Режим JIT, используемый AngularJS и Angular 2, где приложение компилируется во время выполнения.

Например, когда приложение запускается, оно не только работает быстрее, поскольку у клиента нет
компилировать что-либо, но в большинстве случаев это выдает/ломает во время сборки, а не во время выполнения
ошибки компонентов, что приводит к более безопасному и стабильному развертыванию.
• Пакет Animations npm: все существующие анимации и эффекты пользовательского интерфейса, а также новые.
были перенесены в специальный пакет @angular/animations вместо того, чтобы быть частью @angular/
основной. Это был разумный шаг, позволивший неанимированным приложениям отказаться от этой части кода.
тем самым он намного меньше и, возможно, быстрее.
Среди других заметных улучшений — новый валидатор форм для проверки действительных адресов электронной почты, новый
интерфейс paramMap для параметров URL в модуле маршрутизации HTTP и улучшенная поддержка интернализации.

Угловой 5
Выпущенный 1 ноября 2017 года, Angular 5 содержал поддержку TypeScript 2.3, еще одну небольшую новшество.
изменения, множество улучшений производительности и стабильности, а также несколько новых функций, таких как следующие:
• Новый API HTTP-клиента. Начиная с Angular 4.3, модуль @angular/http был отложен.
в пользу нового пакета @angular/common/http с лучшей поддержкой JSON, перехватчиками,
неизменяемые объекты запроса/ответа и другие вещи. Переключение было завершено в Angular 5.
при этом предыдущий модуль устарел, а новый рекомендуется использовать во всех приложениях.
• API передачи состояния: новая функция, которая дает разработчику возможность передавать состояние
приложение между сервером и клиентом.
• Новый набор событий маршрутизатора для более детального контроля над жизненным циклом HTTP: ActivationStart,
ActivationEnd, ChildActivationStart, ChildActivationEnd, GuardsCheckStart,
GuardsCheckEnd, ResolveStart и ResolveEnd.

Угловой 6
Выпущенный в апреле 2018 года, Angular 6 в основном представлял собой поддерживающую версию, больше ориентированную на улучшение
общая согласованность структуры и ее набора инструментов, чем добавление новых функций. Поэтому там
серьезных изменений не произошло. RxJS 6 поддерживает новый способ регистрации провайдеров, новый ProvideIn.
инъекционный декоратор, улучшенная поддержка Angular Material (компонент, специально созданный для реализации
Material Design в пользовательском интерфейсе Angular на стороне клиента), дополнительные команды/обновления CLI и т. д.
Еще одним улучшением, о котором стоит упомянуть, стала новая команда CLI ng add, которая использует пакет
менеджер для загрузки новых зависимостей и вызова сценария установки для обновления нашего проекта с помощью
изменения конфигурации, добавление дополнительных зависимостей и/или инициализация конкретного пакета scaffold.
код.

И последнее, но не менее важное: команда Angular представила Ivy, движок рендеринга Angular следующего поколения, который
Целью является увеличение скорости и уменьшение размера приложения.
Угловой 7
Angular 7 вышел в октябре 2018 года и, безусловно, стал крупным обновлением, о чем мы легко можем догадаться, прочитав слова Стивена Флюина, руководителя отдела по связям с разработчиками в Google и известного Angular.
представитель в официальном блоге разработки Angular после официального релиза:

«Это крупный выпуск, охватывающий всю платформу, включая базовую структуру,
Angular Material и CLI с синхронизированными основными версиями. Этот выпуск содержит
новые функции для нашей цепочки инструментов и позволили запустить несколько крупных партнеров».

Вот список новых функций:
• Простота обновления. Благодаря работе, заложенной в версии 6, команда Angular смогла сократить
шаги, которые необходимо выполнить для обновления существующего приложения Angular со старой версии до
самый последний. Подробную процедуру можно просмотреть, посетив https://update.angular.
io, невероятно полезное интерактивное руководство по обновлению Angular, которое можно использовать для быстрого восстановления.
необходимые шаги, такие как команды CLI и обновления пакетов.
• Обновление CLI: новая команда, которая пытается автоматически обновить приложение Angular.
и его зависимости, следуя процедуре, упомянутой ранее.
• Подсказки интерфейса командной строки: интерфейс командной строки Angular был изменен, чтобы предлагать пользователям при запуске общих
такие команды, как ng new или ng add @angular/material, чтобы помочь разработчикам обнаружить встроенные
такие функции, как маршрутизация и поддержка SCSS.
• Angular Material и CDK: дополнительные элементы пользовательского интерфейса, такие как виртуальная прокрутка; компонент
который загружает и выгружает элементы из DOM на основе видимых частей списка, что делает его
можно создавать очень быстрые возможности для пользователей с очень большими прокручиваемыми списками; CDK-родной
поддержка перетаскивания; улучшены элементы выпадающего списка; и более.
• Партнерские запуски: улучшенная совместимость с рядом сторонних проектов сообщества.
например Angular Console, загружаемая консоль для запуска и выполнения проектов Angular.
на вашей локальной машине; AngularFire, официальный пакет Angular для интеграции с Firebase;
Angular для NativeScript, интеграция Angular и NativeScript — фреймворк для
создание собственных приложений для iOS и Android с использованием клиентских фреймворков на основе JavaScript и/или JS;
некоторые интересные новые особенности Angular для StackBlitz, онлайн-IDE, которую можно использовать
для создания проектов Angular и React, таких как редактор с вкладками и интеграция с Angular
Языковая служба; и так далее.
• Обновленные зависимости: добавлена поддержка TypeScript 3.1, RxJS 6.3 и Node 10, хотя
предыдущие версии все еще можно использовать для обратной совместимости.

Угловой 8
За Angular 7 вскоре последовал Angular 8, выпущенный 29 мая 2019 года. Новый выпуск
в основном речь идет об Ivy, долгожданном новом компиляторе/среде выполнения Angular: несмотря на то, что это продолжающаяся разработка
начиная с Angular 5, версия 8 была первой, которая официально предлагала переключатель среды выполнения для фактического выбора
в использование Ivy, который станет средой выполнения по умолчанию, начиная с Angular 9.

Среди других заметных улучшений и новых функций:
• Поддержка Bazel: Angular 8 была первой версией, поддерживающей Bazel, разработанный бесплатный программный инструмент.
и используется Google для автоматизации создания и тестирования программного обеспечения. Это может быть очень полезно
для разработчиков, стремящихся автоматизировать свой конвейер доставки, поскольку он позволяет выполнять инкрементные сборки и
тесты и даже возможность настройки удаленных сборок (и кешей) на ферме сборки.
• Маршрутизация: был введен новый синтаксис для объявления маршрутов с отложенной загрузкой с помощью метода import().
синтаксис из TypeScript 2.4+ вместо использования строкового литерала. Старый синтаксис был сохранен для
обратная совместимость, но вскоре от нее могут отказаться.
• Сервисные работники: была введена новая стратегия регистрации, позволяющая разработчикам выбирать
когда регистрировать своих работников, а не делать это автоматически в конце запуска приложения
жизненный цикл. Также возможно обойти сервис-воркера для конкретного HTTP-запроса, используя
новый заголовок ngsw-bypass.
• API рабочей области: новый и более удобный способ чтения и изменения рабочей области Angular.
конфигурацию вместо изменения файла angular.json вручную.

В новой версии также были внесены некоторые заметные критические изменения (в основном благодаря Айви) и удалены
некоторые давно устаревшие пакеты, такие как @angular/http, который был заменен на @angular/common/
http в Angular 4.3, а затем официально объявлен устаревшим в версии 5.0.

Угловой 9
Angular 9 был выпущен в феврале 2020 года после долгой серии кандидатов на выпуск в четвертом квартале 2019 года и
была самой последней версией всего 4 месяца, прежде чем была заменена ее преемником (Angular 10).
В новой версии появились следующие новые функции:
• Пакеты JavaScript и производительность. Попытка исправить очень большие файлы пакетов, один из
самые громоздкие проблемы предыдущих версий Angular, которые резко увеличивали
время загрузки и снизилась общая производительность.
• Компилятор Ivy: новый конвейер сборки и рендеринга Angular, поставляемый вместе с Angular 8 по желанию.
предварительный просмотр теперь является механизмом рендеринга по умолчанию.
• Привязки без селектора: полезная функция, которая была доступна в предыдущем механизме рендеринга.
но отсутствующий в предварительной версии Angular 8 Ivy, теперь он доступен и для Ivy.
• Интернационализация: еще одно усовершенствование Ivy, использующее Angular CLI для создания
большая часть стандартного кода, необходимого для создания файлов для переводчиков и публикации Angular
приложение на нескольких языках благодаря новому атрибуту i18n.

Новый атрибут i18n представляет собой нумерним, который часто используется в качестве псевдонима для интернационализации. Число 18 обозначает количество букв между
первый i и последний n в слове «интернационализация». Этот термин, кажется, был
придуманный Digital Equipment Corporation (DEC) примерно в 1970-х или 1980-х годах,
вместе с l10n для локализации из-за чрезмерной длины двух слов.

Долгожданный компилятор Ivy заслуживает еще пары слов, поскольку является очень важной особенностью для
будущее Angular.


Как уже знает среднестатистический разработчик Angular, механизм рендеринга играет важную роль в общем процессе.
производительность любой интерфейсной платформы, поскольку это инструмент, который преобразует заложенные действия и намерения
с помощью логики представления (в компонентах и шаблонах Angular) в инструкции, которые будут
обновите DOM. Если средство рендеринга более эффективно, возможно, ему потребуется меньше инструкций, поэтому
увеличение общей производительности при одновременном уменьшении количества необходимого кода JavaScript на
в то же время. Поскольку пакеты JavaScript, созданные Ivy, намного меньше, чем при предыдущем рендеринге.
Общее улучшение Angular 9 актуально как с точки зрения производительности, так и с точки зрения размера.


Угловой 10
Angular 10 был выпущен 24 июня 2020 года, всего через несколько месяцев после Angular 9. Короткие сроки
Между Angular 9 и 10 команда разработчиков Angular объяснила это попыткой получить
framework вернулся к своему обычному графику, поскольку выход Angular 9 был задержан на несколько недель.
В новом выпуске основное внимание уделялось исправлению ошибок: было исправлено более 700 проблем и более 2000
были затронуты в процессе. Тем не менее, было еще немало важных обновлений, о которых нужно знать:
• Обновите TypeScript 3.9, а также TSLib 2.0 и TS Lint v6. Стоит отметить, что ранее
версии TypeScript больше не поддерживаются, поскольку они несовместимы с некоторыми
потенциально нарушающие изменения в файловой структуре tsconfig.json (см. ниже).
• Улучшения Angular Material, включая новый инструмент выбора диапазона дат.
• Дополнительные предупреждения при использовании импорта CommonJS, поскольку они могут привести как к увеличению размера, так и к замедлению импорта.
Приложения.
• Дополнительные более строгие настройки. Теперь разработчики могут создавать новые проекты со строгим флагом, который
обеспечивает более строгие правила листинга и размеры пакетов, что приводит к более эффективному встряхиванию дерева
(термин, обычно используемый в контексте JavaScript для устранения мертвого кода с помощью импорта и
синтаксис модуля экспорта).

Угловой 11
Angular 11 был выпущен 11 ноября 2020 г., в тот же день выпуска .NET 5. В новый выпуск добавлен
следующие особенности:
• Средства тестирования компонентов — набор классов, которые позволяют тесту взаимодействовать с компонентом через поддерживаемый API. Используя Harness API, тест изолируется от обновлений внутренних компонентов.
компонента, например, изменение его структуры DOM: такая идея исходит от PageObject
шаблон, который обычно используется для интеграционного тестирования.
• Обновленная поддержка горячей замены модулей: HMR — это механизм, позволяющий заменять модули без полного обновления браузера; настроить HMR в Angular 11 намного проще, и они
также представлена новая команда CLI --hmr для ее включения.
• Поддержка TypeScript 4.0. Хотя поддержка TypeScript 3.9 (и более ранних версий) была прекращена, это важное обновление позволяет приложениям Angular 11 создаваться намного быстрее, чем в предыдущих версиях.
• Поддержка Webpack 5, хотя он все еще находится в экспериментальном режиме, поскольку новая версия только выпущена.
недавно и, возможно, все еще не совсем стабилен.
• Миграция TSLint на ESLint. Это одно из наиболее важных изменений в этой версии со времен TSLint.
и Codelyzer официально объявлены устаревшими, и они обязательно будут удалены в следующем выпуске.
выпускать. Чтобы помочь разработчикам справиться с таким обновлением, команда Angular ввела
трехэтапный метод, который можно использовать для плавного перехода с TSLint на ESLint с помощью CLI.
• Прекращена поддержка Internet Explorer 9 и 10, а также мобильного IE.
Другие новые функции включали обновленную предварительную версию языковой службы, новые автоматические миграции и схемы, некоторые улучшения сервисных работников, поддержку отложенной загрузки для именованных точек, защиту от разрешения.
генерация через Angular CLI, более строгие типы для встроенных каналов и год нумерации недель по ISO 8601.
поддержка формата в функции formatDate.

Угловой 12
Angular 12 вышел 12 мая 2021 года после многочисленных бета-версий и кандидатов на выпуск. Главная
Обновление этой версии — это давно объявленное прекращение поддержки устаревшей компиляции View Engine и
рендеринг конвейера в пользу теперь стабильной и объективно превосходящей технологии Ivy, что дает
более быстрая компиляция Ahead-Of-Time.
Другие заметные улучшения включают в себя:
• Нулевой оператор объединения (??) в шаблонах Angular.
• Улучшения стиля благодаря встроенной поддержке Sass в компонентах (в поле стилей
декоратор @Component).
• Прекращение поддержки IE11, которое будет удалено в Angular 13.
• Улучшения HTTP, такие как удобочитаемые имена HttpStatusCode и некоторые новые методы.
для более эффективной работы с параметрами HTTP и метаданными
- Строгий режим по умолчанию. Строгий режим Angular теперь включен по умолчанию в CLI: этот флаг
включит несколько проверок согласованности исходного кода в компиляторе TypeScript, а также в
Угловой. Написание кода с включенным строгим режимом помогает разработчикам обнаруживать ошибки на ранней стадии, уменьшать
размер пакета, избегайте выделения ненужной памяти, следуйте рекомендациям и улучшайте IDE
поддержку, тем самым улучшая удобство обслуживания приложения.

Угловой 13
И последнее, но не менее важное: мы переходим к Angular 13, выпущенному 3 ноября 2021 г. и в настоящее время
самая последняя версия.
В список новых функций входят:
• FormControlStatus — новый тип, который будет легко включать все возможные строки состояния формы.
элементы управления.
• Механизм просмотра, который уже устарел в Angular 12, был удален, в результате чего
новый движок рендеринга Ivy как единственный выбор. Удаление View Engine также означает, что IE11
поддержка также была прекращена.
• Формат пакета Angular (APF) был переработан, в результате чего были удалены метаданные, специфичные для View Engine.
соответствие формату ES2020 и добавление поддержки экспорта пакетов Node.
• Новый API компонентов, который позволяет разработчикам создавать компоненты с меньшим количеством шаблонного кода.
• Поддержка постоянного кэша сборки включена по умолчанию.
• Версия зависимости RxJS обновлена с 6.x до 7.4.
• Улучшения производительности TestBed, которые позволяют проводить более быстрые, менее требовательные к памяти, менее взаимозависимые и более оптимизированные тесты.
На этом мы завершаем наш краткий обзор недавней истории экосистем ASP.NET Core и Angular. В
В следующих разделах мы суммируем наиболее важные причины, побудившие нас выбрать их в 2021–2022 годах.

Причины выбора .NET и Angular
Как мы видели, обе системы претерпели много лет интенсивных изменений. Это привело к
полное переосмысление своего ядра и сразу после этого постоянное напряжение, чтобы вернуться на вершину – или, по крайней мере,
не сдавать позиций перед большинством современных фреймворков, вышедших после уже ушедшего золотого
возраст. Эти фреймворки стремятся доминировать на сцене разработки: Python, Go и Rust для
серверная часть и React, Vue.js и Ember.js для клиентской части, не говоря уже о Node.js.
и экосистему Express, а также большинство старых конкурентов 1990-х и 2000-х годов, таких как Java, Ruby,
и PHP, которые все еще живы и работают.
Тем не менее, вот список веских причин для выбора ASP.NET Core в 2022 году:
• Производительность. Новый веб-стек .NET работает значительно быстрее, особенно после того, как .NET Core 3.1,
с дальнейшими улучшениями в .NET 5 и .NET 6.
• Интеграция: поддерживает большинство, если не все, современные клиентские платформы, включая Angular,
React и Vue.js.

Кроссплатформенный подход: веб-приложения .NET могут работать в Windows, macOS и Linux в
почти бесшовный путь.
• Хостинг: веб-приложения .NET можно размещать практически где угодно: на компьютере под управлением Windows.
с IIS на устройство Linux с Apache или NGINX, от контейнеров Docker до крайних случаев,
сценарии самостоятельного размещения с использованием HTTP-серверов Kestrel и WebListener.
• Внедрение зависимостей. Платформа поддерживает встроенный шаблон проектирования внедрения зависимостей.
что дает огромное количество преимуществ при разработке, таких как уменьшение зависимостей,
возможность повторного использования кода, читаемость и тестирование.
• Модульный HTTP-конвейер: промежуточное ПО ASP.NET предоставляет разработчикам детальный контроль над
HTTP-конвейер, который можно сократить до ядра (для сверхлегких задач) или дополнить
мощные, легко настраиваемые функции, такие как интернационализация, сторонняя аутентификация/
авторизация, кэширование, маршрутизация, бесшовная интеграция со стандартными API, интерфейсами,
и такие инструменты, как SignalR, GraphQL, Swagger, Webhooks и JWT.
• Открытый исходный код: весь стек .NET выпущен с открытым исходным кодом и полностью ориентирован
на сильную поддержку сообщества, поэтому его проверяют и улучшают тысячи разработчиков.
каждый день.
• Параллельное выполнение: поддерживает одновременный запуск нескольких версий приложения или компонента на одном компьютере. По сути, это означает, что возможно иметь
несколько версий общеязыковой среды выполнения и несколько версий приложений
и компоненты, использующие версию среды выполнения, на одном и том же компьютере одновременно.
Это отлично подходит для большинства реальных сценариев разработки, поскольку дает команде разработчиков больше возможностей.
контроль над тем, к каким версиям компонента привязывается приложение, и больший контроль над
какую версию среды выполнения использует приложение.

Что касается фреймворка Angular, самая важная причина, по которой мы выбираем его среди других превосходных
Библиотеки JavaScript, такие как React, Vue.js и Ember.js, заключаются в том, что они уже имеют огромный
пакет функций из коробки, что делает его наиболее подходящим выбором, хотя, возможно, и не таким простым в использовании.
использовать как другие фреймворки/библиотеки. Если мы объединим это с преимуществами согласованности, предоставляемыми
TypeScript, можно сказать, что Angular с момента своего возрождения в 2016 году до наших дней охватывал
рамочный подход более убедителен, чем другие. Это неоднократно подтверждалось в
последние несколько лет, когда проект претерпел шесть основных версий и значительно улучшился с точки зрения стабильности,
производительность и возможности без значительной потери в плане обратной совместимости, лучших практик,
и общий подход. Все эти причины достаточно веские, чтобы инвестировать в него, надеясь, что он и дальше будет сохраняться.
с этими убедительными предпосылками.
Теперь, когда мы осознали причины использования этих фреймворков, давайте спросим себя, как лучше всего
чтобы узнать о них больше: следующая глава должна дать нам ответы, которые нам нужны.


# Краткое содержание

Прежде чем двигаться дальше, давайте кратко повторим то, о чем мы только что говорили в этой главе.
Мы кратко описали выбранные нами платформы — ASP.NET и Angular — и отметили их совместный потенциал в процессе создания современного веб-приложения.

Мы потратили некоторое драгоценное время, вспоминая, что произошло за последние несколько лет, и подведя итоги.
усилия обеих команд разработчиков по перезагрузке и улучшению своих соответствующих фреймворков. Эти резюме
были очень полезны для перечисления и понимания основных причин, по которым мы все еще используем их вместо их
постоянно растущие конкуренты.
В следующей главе мы рассмотрим типичные задачи полного стека разработчика: определим наши цели,
приобретите правильный настрой, настройте среду и создайте наши первые проекты ASP.NET и Angular.

# Предлагаемые темы

Для получения дополнительной информации мы рекомендуем следующие темы: ASP.NET Core, .NET Core, .NET 6,
Angular, Angular 13, Tree-shaking, Angular Ivy, tsconfig.json, Roslyn, CoreCLR, RyuJIT, NuGet, npm,
ECMAScript 6, JavaScript, TypeScript, веб-пакет, SystemJS, RxJS, Cache-Control, HTTP-заголовки, .NET
промежуточное программное обеспечение, Angular Universal, серверный рендеринг (SSR), компилятор с опережением времени (AOT), сервис
рабочие, файлы веб-манифеста и tsconfig.json.






















